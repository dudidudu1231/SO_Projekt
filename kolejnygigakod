#define _POSIX_C_SOURCE 200809L
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <semaphore.h>
#include <sys/mman.h>
#include <sys/wait.h>
#include <signal.h>
#include <sys/msg.h>

// ***********************************************
// *** USTAWIENIA STAŁE, STRUKTURA i KOLEJKA "DONE"
// ***********************************************

#define FIFO_NAME   "/home/maciek/Documents/CPrograms/projekt/my_fifo"
#define ByteSize    256
#define SHM_NAME    "/shared_memory"

// Kolejka dla "done" (P3 -> P1)
struct msg_data {
    long msg_type;
    char msg_text[20];
};
int msgid_p3_p1;  // do przesyłania "done" (P3->P1)

// ***********************************************
// *** 3 KOLEJKI do przekazywania sygnałów *******
// ***  (parent ↔ P1, parent ↔ P2, parent ↔ P3) ***
// ***********************************************
typedef struct {
    long mtype;   // 1 = child->parent, 2 = parent->child
    int  signal;
} sigmsg_t;

static int msgid_p1;  // parent <-> P1
static int msgid_p2;  // parent <-> P2
static int msgid_p3;  // parent <-> P3

// PID-y procesów potomnych (dla kill)
pid_t pid1, pid2, pid3;

// -------------------------------------
// Semafory i pamięć dzielona (jak poprzednio)
// -------------------------------------
sem_t *sem_2, *sem_3;
char   buffer[ByteSize];

// Prosta funkcja błędu
void report_and_exit(const char *msg, int exit_code) {
    perror(msg);
    exit(exit_code);
}

// Liczenie znaków (bez \n i \r)
int zlicz_znaki(const char *str) {
    int count = 0;
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] != '\n' && str[i] != '\r')
            count++;
    }
    return count;
}

// ----------------------------------------------------------------------
// ------------------------- HANDLERY SYGNAŁÓW ---------------------------
// ----------------------------------------------------------------------

// ********** P3: sygnały z terminala **********
void p3_terminal_handler(int sig) {
    printf("[P3, PID=%d] Otrzymałem sygnał z terminala: %d\n", getpid(), sig);

    // Wyślij komunikat child->parent do kolejki msgid_p3
    sigmsg_t msg;
    msg.mtype  = 1;       // child->parent
    msg.signal = sig;
    if (msgsnd(msgid_p3, &msg, sizeof(msg.signal), 0) == -1) {
        perror("[P3] msgsnd (child->parent)");
    }

    // Obudź rodzica (powiadom że coś czeka w kolejce)
    kill(getppid(), SIGUSR1);

    // [POPRAWKA] Usuwamy bezpośrednie raise(SIGTSTP) / raise(SIGCONT).
    // Chcemy, aby P3 faktycznie wykonał zatrzymanie/wznowienie dopiero,
    // gdy otrzyma sygnał w łańcuchu od rodzica (w p3_parent_handler).
    // Dlatego nic dalej tu nie robimy dla SIGTSTP/SIGCONT.

    // Jeśli to np. SIGINT czy SIGTERM z terminala,
    // można zakończyć *lokalnie* (jeśli tak chcemy).
    // Na razie – tak jak w oryginale:
    if (sig == SIGINT) {
        // ewentualnie NIC tu nie robimy,
        // bo i tak rodzic roześle łańcuchem.
    }
    else if (sig == SIGTERM) {
        // j.w.
    }
    // Pozostałe sygnały – brak akcji.
}

// ********** P3: sygnały od rodzica (łańcuch) **********
void p3_parent_handler(int sig) {
    // Odczytujemy z kolejki parent->child (msgid_p3, mtype=2)
    sigmsg_t msg;
    if (msgrcv(msgid_p3, &msg, sizeof(msg.signal), 2, 0) == -1) {
        perror("[P3] msgrcv (parent->child)");
        return;
    }
    printf("[P3, PID=%d] Otrzymałem od rodzica sygnał %d (w kolejce)\n", getpid(), msg.signal);

    // Jeśli SIGTERM => zamykamy P3
    if (msg.signal == SIGTERM) {
        printf("[P3] Kończę działanie po SIGTERM.\n");
        exit(0);
    }
    else if (msg.signal == SIGTSTP) {
        printf("[P3] Zatrzymuję się (SIGTSTP).\n");
        signal(SIGTSTP, SIG_DFL);
        raise(SIGTSTP);
    }
    else if (msg.signal == SIGCONT) {
        printf("[P3] Wznawiam się (SIGCONT).\n");
        signal(SIGCONT, SIG_DFL);
        raise(SIGCONT);
    }
    // ... tu można rozwinąć dla SIGINT, itd.
}

// ********** P2: sygnały od rodzica (łańcuch) **********
void p2_parent_handler(int sig) {
    // Odczyt z kolejki parent->child (msgid_p2, mtype=2)
    sigmsg_t msg;
    if (msgrcv(msgid_p2, &msg, sizeof(msg.signal), 2, 0) == -1) {
        perror("[P2] msgrcv (parent->child)");
        return;
    }
    printf("[P2, PID=%d] Otrzymałem od rodzica sygnał %d. Powiadamiam P3...\n", getpid(), msg.signal);

    // Budzimy P3, by odebrał swój sygnał (w kolejce msgid_p3)
    kill(pid3, SIGUSR1);

    // Teraz P2 sam wykonuje sygnał
    if (msg.signal == SIGTERM) {
        printf("[P2] Kończę działanie po SIGTERM.\n");
        exit(0);
    }
    else if (msg.signal == SIGTSTP) {
        printf("[P2] Zatrzymuję się (SIGTSTP).\n");
        signal(SIGTSTP, SIG_DFL);
        raise(SIGTSTP);
    }
    else if (msg.signal == SIGCONT) {
        printf("[P2] Wznawiam się (SIGCONT).\n");
        signal(SIGCONT, SIG_DFL);
        raise(SIGCONT);
    }
    // ... itd.
}

// ********** P1: sygnały od rodzica (łańcuch) **********
void p1_parent_handler(int sig) {
    // Odczyt z kolejki parent->child (msgid_p1, mtype=2)
    sigmsg_t msg;
    if (msgrcv(msgid_p1, &msg, sizeof(msg.signal), 2, 0) == -1) {
        perror("[P1] msgrcv (parent->child)");
        return;
    }
    printf("[P1, PID=%d] Otrzymałem od rodzica sygnał %d. Powiadamiam P2...\n", getpid(), msg.signal);

    // Budzimy P2, by on też odebrał swój sygnał
    kill(pid2, SIGUSR1);

    // Teraz P1 wykonuje sygnał
    if (msg.signal == SIGTERM) {
        printf("[P1] Kończę działanie po SIGTERM.\n");
        exit(0);
    }
    else if (msg.signal == SIGTSTP) {
        printf("[P1] Zatrzymuję się (SIGTSTP).\n");
        signal(SIGTSTP, SIG_DFL);
        raise(SIGTSTP);
    }
    else if (msg.signal == SIGCONT) {
        printf("[P1] Wznawiam się (SIGCONT).\n");
        signal(SIGCONT, SIG_DFL);
        raise(SIGCONT);
    }
    // ... itd.
}

// ********** RODZIC: sygnał SIGUSR1 przychodzi od P3 **********
void parent_sigusr1_handler(int sig) {
    // [UWAGA] W praktyce msgrcv w handlerze nie jest async-signal-safe,
    // ale pozostawiamy to tak, jak w oryginale.

    // Najpierw odczytujemy z kolejki msgid_p3 (child->parent), mtype=1
    sigmsg_t msg;
    if (msgrcv(msgid_p3, &msg, sizeof(msg.signal), 1, 0) == -1) {
        perror("[PARENT] msgrcv (child->parent)");
        return;
    }
    int received_signal = msg.signal;
    printf("[PARENT] Otrzymałem sygnał %d od P3 (z terminala).\n", received_signal);

    // Rozsyłamy do P1, P2, P3 (parent->child, mtype=2)
    msg.mtype  = 2;  // parent->child
    msg.signal = received_signal;
    if (msgsnd(msgid_p1, &msg, sizeof(msg.signal), 0) == -1)
        perror("[PARENT] msgsnd -> P1");
    if (msgsnd(msgid_p2, &msg, sizeof(msg.signal), 0) == -1)
        perror("[PARENT] msgsnd -> P2");
    if (msgsnd(msgid_p3, &msg, sizeof(msg.signal), 0) == -1)
        perror("[PARENT] msgsnd -> P3");

    // Budzimy P1, by zaczął łańcuch
    kill(pid1, SIGUSR1);
}

// ----------------------------------------------------------------------
// ------------------------- KOD PROCESU P1 ------------------------------
// ----------------------------------------------------------------------
void P1() {
    // Rejestrujemy handler do sygnałów od rodzica (łańcuch)
    signal(SIGUSR1, p1_parent_handler);

    // Ignoruj sygnały z terminala, bo obsługuje je P3 w nowym mechanizmie
    signal(SIGINT,  SIG_IGN);
    signal(SIGTERM, SIG_IGN);
    signal(SIGTSTP, SIG_IGN);
    signal(SIGCONT, SIG_IGN);

    // Tworzymy FIFO do zapisu
    unlink(FIFO_NAME);
    if (mkfifo(FIFO_NAME, 0666) == -1 && errno != EEXIST) {
        report_and_exit("mkfifo (P1) error", 1);
    }
    int fd = open(FIFO_NAME, O_WRONLY);
    if (fd < 0) {
        report_and_exit("open FIFO (P1) error", 1);
    }

    while (1) {
        printf("\n[P1] Menu:\n");
        printf("1. Czytaj z klawiatury (koniec: '.')\n");
        printf("2. Czytaj z pliku (do EOF)\n");
        printf("Wybierz opcje: ");
        fflush(stdout);

        int choice;
        if (scanf("%d", &choice) != 1) {
            // Czyszczenie bufora
            int c; 
            while ((c = getchar()) != '\n' && c != EOF) {}
            printf("[P1] Nieprawidlowy wybor.\n");
            continue;
        }
        // usunięcie reszty linii
        int c; 
        while ((c=getchar())!='\n' && c!=EOF) {}

        if (choice == 1) {
            // --- Czytanie z klawiatury ---
            while (1) {
                printf("[P1] Wpisz tekst ('.' konczy): ");
                fflush(stdout);

                if (!fgets(buffer, ByteSize, stdin)) {
                    if (feof(stdin)) {
                        printf("[P1] EOF na stdin.\n");
                    } else {
                        perror("[P1] Błąd odczytu stdin");
                    }
                    break; // powrót do menu
                }
                buffer[strcspn(buffer, "\n")] = '\0';

                if (strcmp(buffer, ".") == 0) {
                    printf("[P1] Koniec wczytywania z klawiatury.\n");
                    break;
                }

                // Dodaj '\n' na końcu, żeby P2 widział koniec linii
                size_t len = strlen(buffer);
                buffer[len]   = '\n';
                buffer[len+1] = '\0';

                // Zapis do FIFO
                ssize_t wret;
                do {
                    wret = write(fd, buffer, len+1);
                } while (wret == -1 && errno == EINTR);
                if (wret < 0) {
                    perror("[P1] write FIFO error");
                    break;
                }

                // Czekamy na "done" od P3 (kolejka msgid_p3_p1)
                struct msg_data m;
                if (msgrcv(msgid_p3_p1, &m, sizeof(m.msg_text), 1, 0) == -1) {
                    if (errno == EINTR) {
                        continue;
                    }
                    perror("[P1] msgrcv p3->p1");
                    break;
                }
                // Otrzymaliśmy potwierdzenie "done"
            }
        }
        else if (choice == 2) {
            // --- Czytanie z pliku ---
            char filename[256];
            printf("[P1] Podaj nazwę pliku: ");
            fflush(stdout);
            if (!fgets(filename, sizeof(filename), stdin)) {
                fprintf(stderr, "[P1] Błąd odczytu nazwy pliku.\n");
                continue;
            }
            filename[strcspn(filename, "\n")] = '\0';

            FILE *file = fopen(filename, "r");
            if (!file) {
                perror("[P1] Nie można otworzyć pliku");
                continue;
            }

            while (1) {
                char *p = fgets(buffer, ByteSize, file);
                if (!p) {
                    if (!feof(file)) {
                        perror("[P1] Błąd odczytu pliku");
                    }
                    printf("[P1] Koniec pliku.\n");
                    break;
                }
                printf("[P1] Wczytano z pliku: %s", buffer);

                size_t toWrite = strlen(buffer);
                // Zapis do FIFO
                ssize_t wret;
                do {
                    wret = write(fd, buffer, toWrite);
                } while (wret == -1 && errno == EINTR);
                if (wret < 0) {
                    perror("[P1] write FIFO error");
                    break;
                }

                // Oczekiwanie na "done" od P3
                struct msg_data m;
                if (msgrcv(msgid_p3_p1, &m, sizeof(m.msg_text), 1, 0) == -1) {
                    if (errno == EINTR) {
                        continue;
                    }
                    perror("[P1] msgrcv p3->p1");
                    break;
                }
            }
            fclose(file);
        }
        else {
            printf("[P1] Nieprawidłowy wybór.\n");
        }
    }

    close(fd);
    printf("[P1] Kończę działanie.\n");
    fflush(stdout);
    exit(0);
}

// ----------------------------------------------------------------------
// ------------------------- KOD PROCESU P2 ------------------------------
// ----------------------------------------------------------------------
void P2(char *shared_memory) {
    // Handler na SIGUSR1 od rodzica (łańcuch)
    signal(SIGUSR1, p2_parent_handler);

    // Ignorujemy sygnały terminalowe w P2 (bo obsługuje je P3)
    signal(SIGINT,  SIG_IGN);
    signal(SIGTERM, SIG_IGN);
    signal(SIGTSTP, SIG_IGN);
    signal(SIGCONT, SIG_IGN);

    // Otwieramy FIFO do odczytu
    int fd = open(FIFO_NAME, O_RDONLY);
    if (fd < 0) {
        report_and_exit("open FIFO (P2) error", 1);
    }
    FILE *f = fdopen(fd, "r");
    if (!f) {
        report_and_exit("fdopen (P2) error", 1);
    }

    while (1) {
        // Odczyt jednej linii z FIFO
        char *res = fgets(buffer, ByteSize, f);
        if (!res) {
            if (feof(f)) {
                printf("[P2] Koniec FIFO (EOF)\n");
            } else {
                perror("[P2] fgets FIFO error");
            }
            break;
        }
        printf("[P2] Dane odczytane z FIFO: %s", buffer);

        // Liczymy znaki i przekazujemy do pamięci dzielonej
        int ilosc = zlicz_znaki(buffer);
        sprintf(shared_memory, "%d", ilosc);
        printf("[P2] Ilość znaków: %d => przekazuję do P3\n", ilosc);

        // Poinformuj P3: sem_post(sem_3)
        if (sem_post(sem_3) == -1) {
            if (errno != EINTR) {
                perror("[P2] sem_post(sem_3)");
                break;
            }
        }

        // Czekamy, aż P3 skończy -> sem_wait(sem_2)
        if (sem_wait(sem_2) == -1) {
            if (errno != EINTR) {
                perror("[P2] sem_wait(sem_2)");
                break;
            }
        }
    }

    fclose(f);
    printf("[P2] Kończę działanie.\n");
    fflush(stdout);
    exit(0);
}

// ----------------------------------------------------------------------
// ------------------------- KOD PROCESU P3 ------------------------------
// ----------------------------------------------------------------------
void P3(char *shared_memory) {
    // P3 przechwytuje sygnały z terminala:
    signal(SIGINT,  p3_terminal_handler);
    signal(SIGTERM, p3_terminal_handler);
    signal(SIGTSTP, p3_terminal_handler);
    signal(SIGCONT, p3_terminal_handler);

    // 2) Odbiera też sygnały od rodzica (łańcuch)
    signal(SIGUSR1, p3_parent_handler);

    while (1) {
        // czekamy na sem_3 od P2
        if (sem_wait(sem_3) == -1) {
            if (errno != EINTR) {
                perror("[P3] sem_wait(sem_3)");
                break;
            }
        }

        // Odczyt z pamięci dzielonej
        printf("[P3] Dane odczytane z PD: %s\n", shared_memory);
        printf("-------------------------------\n");

        // sygnalizujemy P2 (sem_2)
        if (sem_post(sem_2) == -1) {
            if (errno != EINTR) {
                perror("[P3] sem_post(sem_2)");
                break;
            }
        }

        // Wysyłamy "done" do P1 (aby zwolnić go z msgrcv)
        struct msg_data m;
        m.msg_type = 1; // cokolwiek, byle =1
        strcpy(m.msg_text, "done");
        if (msgsnd(msgid_p3_p1, &m, sizeof(m.msg_text), 0) == -1) {
            perror("[P3] msgsnd p3->p1");
        }
    }

    printf("[P3] Kończę działanie.\n");
    fflush(stdout);
    exit(0);
}

// ----------------------------------------------------------------------
// ------------------------- Funkcja main (rodzic) -----------------------
// ----------------------------------------------------------------------
int main() {
    // Na wszelki wypadek usuwamy stare semafory/PW
    sem_unlink("/sem_2");
    sem_unlink("/sem_3");
    shm_unlink(SHM_NAME);
    unlink(FIFO_NAME);

    // *** Kolejka "done" P3->P1 ***
    key_t key_p3_p1 = ftok(".", 'D');
    msgid_p3_p1 = msgget(key_p3_p1, 0666 | IPC_CREAT);
    if (msgid_p3_p1 == -1) {
        report_and_exit("msgget p3->p1 error", 1);
    }

    // *** 3 kolejki do sygnałów ***
    key_t key_p1 = ftok(".", 'A');
    key_t key_p2 = ftok(".", 'B');
    key_t key_p3 = ftok(".", 'C');

    msgid_p1 = msgget(key_p1, 0666 | IPC_CREAT);
    msgid_p2 = msgget(key_p2, 0666 | IPC_CREAT);
    msgid_p3 = msgget(key_p3, 0666 | IPC_CREAT);

    if (msgid_p1 < 0 || msgid_p2 < 0 || msgid_p3 < 0) {
        report_and_exit("msgget (p1/p2/p3) error", 1);
    }

    // Tworzymy semafory
    sem_2 = sem_open("/sem_2", O_CREAT | O_EXCL, 0666, 0);
    sem_3 = sem_open("/sem_3", O_CREAT | O_EXCL, 0666, 0);
    if (sem_2 == SEM_FAILED || sem_3 == SEM_FAILED) {
        report_and_exit("sem_open error", 1);
    }

    // Pamięć dzielona
    int shm_fd = shm_open(SHM_NAME, O_CREAT | O_RDWR, 0666);
    if (shm_fd == -1) {
        report_and_exit("shm_open error", 1);
    }
    if (ftruncate(shm_fd, ByteSize) == -1) {
        report_and_exit("ftruncate error", 1);
    }
    char *shared_memory = mmap(NULL, ByteSize, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
    if (shared_memory == MAP_FAILED) {
        report_and_exit("mmap error", 1);
    }

    // Rodzic rejestruje handler na SIGUSR1 (sygnał przychodzi od P3)
    struct sigaction sa_parent;
    memset(&sa_parent, 0, sizeof(sa_parent));
    sa_parent.sa_handler = parent_sigusr1_handler;
    sigaction(SIGUSR1, &sa_parent, NULL);

    // Możemy ignorować np. wszystkie inne sygnały w rodzicu
    // (żeby tylko P3 je przejmował z terminala)
    for (int i=1; i<32; i++) {
        if (i == SIGKILL || i == SIGSTOP || i == SIGUSR1) continue;
        signal(i, SIG_IGN);
    }

    // Tworzenie procesów
    pid1 = fork();
    if (pid1 == 0) {
        P1();
    }

    pid2 = fork();
    if (pid2 == 0) {
        P2(shared_memory);
    }

    pid3 = fork();
    if (pid3 == 0) {
        P3(shared_memory);
    }

    // Rodzic czeka na zakończenie dzieci
    for (int i = 0; i < 3; i++) {
        wait(NULL);
    }

    // Sprzątanie
    sem_unlink("/sem_2");
    sem_unlink("/sem_3");
    shm_unlink(SHM_NAME);
    msgctl(msgid_p3_p1, IPC_RMID, NULL);

    // Usunięcie kolejek sygnałów
    msgctl(msgid_p1, IPC_RMID, NULL);
    msgctl(msgid_p2, IPC_RMID, NULL);
    msgctl(msgid_p3, IPC_RMID, NULL);

    printf("[Parent] Wszystkie procesy zakończone. Zasoby zwolnione.\n");
    return 0;
}
