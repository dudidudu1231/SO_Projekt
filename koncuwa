#define _POSIX_C_SOURCE 200809L
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <semaphore.h>
#include <sys/mman.h>
#include <sys/wait.h>
#include <signal.h>
#include <sys/msg.h>

#define FIFO_NAME   "/home/maciek/Documents/CPrograms/projekt/my_fifo"
#define ByteSize    256
#define SHM_NAME    "/shared_memory"

// Struktura komunikatów do przesyłania danych
struct msg_buffer {
    long msg_type;
    char msg_text[20];
};

struct sig_buffer {
    long mtype;
    int  sigval;
};

// Identyfikatory kolejek komunikatów (dane)
int msgid_p1_p2;  // Kolejka dla komunikacji P1 -> P2
int msgid_p2_p3;  // Kolejka dla komunikacji P2 -> P3
int msgid_p3_p1;  // Kolejka dla komunikacji P3 -> P1

// Identyfikatory kolejek komunikatów (sygnały) - dodajemy
int msgidSigP1;   // Kolejka sygnałowa dla P1
int msgidSigP2;   // Kolejka sygnałowa dla P2
int msgidSigP3;   // Kolejka sygnałowa dla P3
int msgidSigParent;

sem_t *sem_2, *sem_3;
char  buffer[ByteSize];

// PID-y procesów
pid_t pid1, pid2, pid3;
pid_t parentPID = 0;

volatile sig_atomic_t g_paused = 0;
volatile sig_atomic_t g_terminate = 0;

// Prosta funkcja do wypisywania błędów
void report_and_exit(const char *msg, int exit_code) {
    perror(msg);
    exit(exit_code);
}

// Liczenie znaków (bez \n i \r)
int zlicz_znaki(const char *str) {
    int count = 0;
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] != '\n' && str[i] != '\r')
            count++;
    }
    return count;
}

//**************************************
// Funkcje pomocnicze do sygnałów
// (wysyłanie/odbieranie wiadomości w kolejce sygnałowej)
//**************************************
void sendSignalMsg(int msqID, int sigval) {
    struct sig_buffer s;
    s.mtype  = 1;    // >0
    s.sigval = sigval;
    if (msgsnd(msqID, &s, sizeof(s.sigval), 0) == -1) {
        perror("msgsnd error (signal)");
    }
}

int receiveSignalMsg(int msqID) {
    struct sig_buffer s;
    if (msgrcv(msqID, &s, sizeof(s.sigval), 0, 0) == -1) {
        perror("msgrcv error (signal)");
        return -1;
    }
    return s.sigval;
}

//**************************************
//  Łańcuch w P1->P2->P3 dla sygnału SIGUSR1
//  (tylko w tym sygnale odczytujemy kolejkę sygnałową)
//**************************************

void handlerSIGUSR1_P1(int sig) {
    int val = receiveSignalMsg(msgidSigP1);
    printf("[P1] Odczytalem z kolejki sygnal = %d\n", val);

    if (val == SIGTSTP) {
        g_paused = 1;
        printf("[P1] => SIGTSTP: pauza.\n");
    } else if (val == SIGCONT) {
        g_paused = 0;
        printf("[P1] => SIGCONT: wznowienie.\n");
    } else if (val == SIGTERM) {
        g_terminate = 1;
        printf("[P1] => SIGTERM: koncze prace.\n");
    }

    // przekaz dalej do P2
    kill(pid2, SIGUSR1);
}

void handlerSIGUSR1_P2(int sig) {
    int val = receiveSignalMsg(msgidSigP2);
    printf("[P2] Odczytalem z kolejki sygnal = %d\n", val);

    if (val == SIGTSTP) {
        g_paused = 1;
        printf("[P2] => SIGTSTP: pauza.\n");
    } else if (val == SIGCONT) {
        g_paused = 0;
        printf("[P2] => SIGCONT: wznowienie.\n");
    } else if (val == SIGTERM) {
        g_terminate = 1;
        printf("[P2] => SIGTERM: koncze prace.\n");
    }

    // przekaz dalej do P3
    kill(pid3, SIGUSR1);
}

void handlerSIGUSR1_P3(int sig) {
    int val = receiveSignalMsg(msgidSigP3);
    printf("[P3] Odczytalem z kolejki sygnal = %d\n", val);

    if (val == SIGTSTP) {
        g_paused = 1;
        printf("[P3] => SIGTSTP: pauza.\n");
    } else if (val == SIGCONT) {
        g_paused = 0;
        printf("[P3] => SIGCONT: wznowienie.\n");
    } else if (val == SIGTERM) {
        g_terminate = 1;
        printf("[P3] => SIGTERM: koncze prace.\n");
    }
}

void handlerSIGTSTP_P3(int sig, siginfo_t *info, void *ctx) {
    printf("[P3] Otrzymalem SIGTSTP. Przekazuje do rodzica.\n");
    sendSignalMsg(msgidSigParent, SIGTSTP);
    kill(parentPID, SIGUSR1);
}

void handlerSIGCONT_P3(int sig, siginfo_t *info, void *ctx) {
    printf("[P3] Otrzymalem SIGCONT. Przekazuje do rodzica.\n");

    sendSignalMsg(msgidSigParent, SIGCONT);
    kill(parentPID, SIGUSR1);
}

void handlerSIGTERM_P3(int sig, siginfo_t *info, void *ctx) {
    printf("[P3] Otrzymalem SIGTERM. Przekazuje do rodzica.\n");
    sendSignalMsg(msgidSigParent, SIGTERM);
    kill(parentPID, SIGUSR1);
}

//**************************************
//  Handler w rodzicu na SIGUSR1
//  (info, że P3 odebrał SIGTSTP/SIGCONT/SIGTERM).
//  Użyjemy globalnej zmiennej lastSignalFromP3
//**************************************

void handlerSIGUSR1_parent(int sig) {
    int val = receiveSignalMsg(msgidSigParent);
    if( val < 0){
        return;
    }
    printf("[Parent] Odczytalem od P3 sygnal: %d", val);

    sendSignalMsg(msgidSigP1, val);
    sendSignalMsg(msgidSigP2, val);
    sendSignalMsg(msgidSigP3, val);

    kill(pid1, SIGUSR1);
}

void ignoreAllButThese_P3() {
    for (int i = 1; i < 32; i++) {
        if (i == SIGKILL || i == SIGSTOP) 
            continue;  // nie można
        if (i == SIGTSTP || i == SIGCONT || i == SIGTERM || i == SIGUSR1) 
            continue;  // nie ignorujemy
        signal(i, SIG_IGN);
    }
}

void ignoreAllButSIGUSR1_P1_P2() {
    for(int i = 1; i < 32; i++) {
        if( i== SIGKILL || i == SIGSTOP)
            continue;
        if( i == SIGUSR1)
            continue;
        signal(i, SIG_IGN);
    }
}

void P1() {
    ignoreAllButSIGUSR1_P1_P2();  // ignorujemy wszystkie sygnały poza SIGUSR1

    // Ustaw handler SIGUSR1
    struct sigaction sa;
    memset(&sa, 0, sizeof(sa));
    sa.sa_handler = handlerSIGUSR1_P1;
    sigaction(SIGUSR1, &sa, NULL);

    // Otwieramy FIFO do zapisu
    if (mkfifo(FIFO_NAME, 0666) == -1 && errno != EEXIST) {
        report_and_exit("mkfifo error", 1);
    }
    int fd = open(FIFO_NAME, O_WRONLY);
    if (fd == -1) {
        report_and_exit("open FIFO error", 1);
    }

    struct msg_buffer message;
    message.msg_type = 1;

    while (!g_terminate) {
        // jeśli wstrzymane
        while (g_paused && !g_terminate) {
            // busy-wait
        }
        if (g_terminate) break;

        printf("\nMenu (P1):\n");
        printf("1. Czytaj z klawiatury (stdin) [koniec po wpisaniu kropki '.']\n");
        printf("2. Czytaj z pliku (do EOF)\n");
        printf("Wybierz opcję: ");
        fflush(stdout);

        int choice;
        if (scanf("%d", &choice) != 1) {
            // błąd, czyszczenie bufora
            int c; 
            while ((c=getchar())!='\n' && c!=EOF) {}
            printf("Nieprawidlowy wybor.\n");
            continue;
        }
        // czyszczenie bufora
        int c; 
        while ((c=getchar())!='\n' && c!=EOF) {}

        if (choice == 1) {
            // klawiatura
            while (!g_terminate) {
                while (g_paused && !g_terminate) {}
                if (g_terminate) break;

                printf("P1(%d): Wprowadz tekst do FIFO ('.' konczy): ", getpid());
                fflush(stdout);

                if (!fgets(buffer, ByteSize, stdin)) {
                    // EOF
                    if (feof(stdin)) {
                        printf("[P1] EOF na stdin.\n");
                    } else {
                        perror("[P1] Blad odczytu stdin");
                    }
                    break;  // do menu
                }
                buffer[strcspn(buffer, "\n")] = '\0';

                // sprawdzamy kropkę
                if (strcmp(buffer, ".") == 0) {
                    printf("[P1] Kropka => koniec wczytywania z klawiatury.\n");
                    break;
                }

                // Wysyłamy do FIFO
                int len = strlen(buffer);
                buffer[len]   = '\n';
                buffer[len+1] = '\0';
                len++;
                write(fd, buffer, len);

                // Wysyłamy "start" do P2 (kolejka danych)
                strcpy(message.msg_text, "start");
                msgsnd(msgid_p1_p2, &message, sizeof(message.msg_text), 0);
            }
        }
        else if (choice == 2) {
            char filename[256];
            printf("Podaj nazwę pliku: ");
            fflush(stdout);
            if (!fgets(filename, sizeof(filename), stdin)) {
                fprintf(stderr, "Blad odczytu nazwy pliku.\n");
                continue;
            }
            filename[strcspn(filename, "\n")] = '\0';

            FILE *file = fopen(filename, "r");
            if (!file) {
                perror("Nie udało się otworzyć pliku");
                continue;
            }

            while (!g_terminate) {
                while (g_paused && !g_terminate) {}
                if (g_terminate) break;

                if (!fgets(buffer, ByteSize, file)) {
                    // EOF lub błąd
                    if (!feof(file)) {
                        perror("[P1] blad odczytu pliku");
                    }
                    printf("P1(%d): Koniec pliku.\n", getpid());
                    break;
                }

                printf("P1(%d): Wczytano z pliku: %s", getpid(), buffer);
                int len = strlen(buffer);
                // wysylamy do FIFO
                write(fd, buffer, len);

                // Komunikat do P2
                strcpy(message.msg_text, "start");
                msgsnd(msgid_p1_p2, &message, sizeof(message.msg_text), 0);

                msgrcv(msgid_p3_p1, &message, sizeof(message.msg_text), 1, 0);
            }

            fclose(file);
        }
        else {
            printf("Nieprawidlowy wybor.\n");
        }
    }

    close(fd);
    printf("[P1] Koncze dzialanie.\n");
    exit(0);
}

//--------------------------------------
//  Proces P2
//--------------------------------------
void P2(char *shared_memory) {
    ignoreAllButSIGUSR1_P1_P2();  // ignoruje sygnały poza SIGUSR1

    // Handler SIGUSR1
    struct sigaction sa;
    memset(&sa, 0, sizeof(sa));
    sa.sa_handler = handlerSIGUSR1_P2;
    sigaction(SIGUSR1, &sa, NULL);

    int fd = open(FIFO_NAME, O_RDONLY);
    if (fd == -1) {
        report_and_exit("open FIFO error (P2)", 1);
    }

    struct msg_buffer message;
    message.msg_type = 1;

    while (!g_terminate) {
        while (g_paused && !g_terminate) {}
        if (g_terminate) break;

        // Czekaj na sygnał od P1 (kolejka danych)
        if (msgrcv(msgid_p1_p2, &message, sizeof(message.msg_text), 1, 0) == -1) {
            if (errno == EINTR) continue; 
            perror("msgrcv (p1->p2)");
            break;
        }

        // Czytamy z FIFO
        ssize_t r = read(fd, buffer, ByteSize - 1);
        if (r <= 0) {
            if (r < 0 && errno == EINTR) {
                continue;
            }
            // koniec FIFO? 
            printf("[P2] Koniec lub blad FIFO\n");
            break;
        }
        buffer[r] = '\0';

        printf("P2(%d): Dane odczytane z FIFO: %s\n", getpid(), buffer);

        // liczymy znaki
        int ilosc = zlicz_znaki(buffer);
        sprintf(shared_memory, "%d", ilosc);

        printf("P2(%d): Ilosc znakow: %d => przekazuje do P3\n", getpid(), ilosc);

        // sem_post(sem_3) - sygnalizuj P3
        sem_post(sem_3);

        // Wyślij sygnał "start" do P3 (kolejka danych)
        strcpy(message.msg_text, "start");
        msgsnd(msgid_p2_p3, &message, sizeof(message.msg_text), 0);

        // Czekaj na odpowiedź od P3 (sem_2)
        sem_wait(sem_2);
    }

    close(fd);
    printf("[P2] Koncze dzialanie.\n");
    exit(0);
}

//--------------------------------------
//  Proces P3
//  - odbiera SIGTSTP/SIGCONT/SIGTERM, 
//    a pozostałe ignoruje
//--------------------------------------
void P3(char *shared_memory) {
    // Najpierw zignoruj wszystkie sygnały
    ignoreAllButThese_P3();

    // Ustawiamy handler SIGUSR1 (łańcuch)
    struct sigaction sa_usr1;
    memset(&sa_usr1, 0, sizeof(sa_usr1));
    sa_usr1.sa_handler = handlerSIGUSR1_P3;
    sigaction(SIGUSR1, &sa_usr1, NULL);

    // Ustawiamy SA_SIGINFO dla SIGTSTP, SIGCONT, SIGTERM
    struct sigaction sa_tstp;
    memset(&sa_tstp, 0, sizeof(sa_tstp));
    sa_tstp.sa_flags     = SA_SIGINFO;
    sa_tstp.sa_sigaction = handlerSIGTSTP_P3;
    sigaction(SIGTSTP, &sa_tstp, NULL);

    struct sigaction sa_cont;
    memset(&sa_cont, 0, sizeof(sa_cont));
    sa_cont.sa_flags     = SA_SIGINFO;
    sa_cont.sa_sigaction = handlerSIGCONT_P3;
    sigaction(SIGCONT, &sa_cont, NULL);

    struct sigaction sa_term;
    memset(&sa_term, 0, sizeof(sa_term));
    sa_term.sa_flags     = SA_SIGINFO;
    sa_term.sa_sigaction = handlerSIGTERM_P3;
    sigaction(SIGTERM, &sa_term, NULL);

    struct msg_buffer message;
    message.msg_type = 1;

    while (!g_terminate) {
        while (g_paused && !g_terminate) {}
        if (g_terminate) break;

        // Czekaj na sygnał od P2 (kolejka danych)
        if (msgrcv(msgid_p2_p3, &message, sizeof(message.msg_text), 1, 0) == -1) {
            if (errno == EINTR) continue;
            perror("msgrcv p2->p3");
            break;
        }

        // sem_wait(sem_3)
        sem_wait(sem_3);

        printf("P3(%d): Dane odczytane z PD: %s\n", getpid(), shared_memory);
        printf("-------------------------------\n");

        // Sygnalizuj P2 przez sem_2
        sem_post(sem_2);

        // Wyślij "done" do P1
        strcpy(message.msg_text, "done");
        msgsnd(msgid_p3_p1, &message, sizeof(message.msg_text), 0);
    }

    printf("[P3] Koncze dzialanie.\n");
    exit(0);
}

int main() {
    parentPID = getpid();

    // Najpierw usuń stare semafory, pamięć i tak dalej
    sem_unlink("/sem_2");
    sem_unlink("/sem_3");
    shm_unlink(SHM_NAME);
    unlink(FIFO_NAME);

    // Tworzymy 3 kolejki do danych (jak w oryginale)
    key_t key_p1_p2 = ftok(".", 'A');
    key_t key_p2_p3 = ftok(".", 'B');
    key_t key_p3_p1 = ftok(".", 'C');

    msgid_p1_p2 = msgget(key_p1_p2, 0666 | IPC_CREAT);
    msgid_p2_p3 = msgget(key_p2_p3, 0666 | IPC_CREAT);
    msgid_p3_p1 = msgget(key_p3_p1, 0666 | IPC_CREAT);

    if (msgid_p1_p2 == -1 || msgid_p2_p3 == -1 || msgid_p3_p1 == -1) {
        report_and_exit("msgget error (dane)", 1);
    }

    // Tworzymy 3 kolejki sygnałowe (nowe klucze, np. 'X','Y','Z')
    key_t key_s_p1 = ftok(".", 'X');
    key_t key_s_p2 = ftok(".", 'Y');
    key_t key_s_p3 = ftok(".", 'Z');
    key_t key_s_parent = ftok(".", 'W');

    msgidSigP1 = msgget(key_s_p1, 0666 | IPC_CREAT);
    msgidSigP2 = msgget(key_s_p2, 0666 | IPC_CREAT);
    msgidSigP3 = msgget(key_s_p3, 0666 | IPC_CREAT);
    msgidSigParent = msgget(key_s_parent, 0666 | IPC_CREAT);

    if (msgidSigP1 == -1 || msgidSigP2 == -1 || msgidSigP3 == -1 || msgidSigP1 == -1) {
        report_and_exit("msgget error (signal)", 1);
    }

    // Tworzymy semafory
    sem_2 = sem_open("/sem_2", O_CREAT | O_EXCL, 0666, 0);
    sem_3 = sem_open("/sem_3", O_CREAT | O_EXCL, 0666, 0);
    if (sem_2 == SEM_FAILED || sem_3 == SEM_FAILED) {
        report_and_exit("sem_open error", 1);
    }

    // Tworzymy pamięć dzieloną
    int shm_fd = shm_open(SHM_NAME, O_CREAT | O_RDWR, 0666);
    if (shm_fd == -1) {
        report_and_exit("shm_open error", 1);
    }
    if (ftruncate(shm_fd, ByteSize) == -1) {
        report_and_exit("ftruncate error", 1);
    }
    char *shared_memory = mmap(NULL, ByteSize, PROT_READ | PROT_WRITE,
                               MAP_SHARED, shm_fd, 0);
    if (shared_memory == MAP_FAILED) {
        report_and_exit("mmap error", 1);
    }

    printf("Proces macierzysty (PID: %d) tworzy procesy potomne...\n", getpid());

    // Ustawiamy handler SIGUSR1 w rodzicu
    // (P3 bedzie do nas kill(..., SIGUSR1) w reakcji na SIGTSTP/SIGCONT/SIGTERM)
    struct sigaction sa_parent;
    memset(&sa_parent, 0, sizeof(sa_parent));
    sa_parent.sa_handler = handlerSIGUSR1_parent;
    sigaction(SIGUSR1, &sa_parent, NULL);

    // Ignoruj inne sygnały w rodzicu (opcjonalnie)
    for (int i=1; i<32; i++) {
        if (i==SIGKILL || i==SIGSTOP || i==SIGUSR1) 
            continue;
        signal(i, SIG_IGN);
    }

    // Fork P1
    pid1 = fork();
    if (pid1 == 0) {
        P1();
    }

    // Fork P2
    pid2 = fork();
    if (pid2 == 0) {
        P2(shared_memory);
    }

    // Fork P3
    pid3 = fork();
    if (pid3 == 0) {
        P3(shared_memory);
    }
    
    for(int i = 0; i < 3; i++){
        wait(NULL);
    }

    // Sprzątanie zasobów
    sem_unlink("/sem_2");
    sem_unlink("/sem_3");
    shm_unlink(SHM_NAME);

    msgctl(msgid_p1_p2, IPC_RMID, NULL);
    msgctl(msgid_p2_p3, IPC_RMID, NULL);
    msgctl(msgid_p3_p1, IPC_RMID, NULL);

    // usuń kolejki sygnałowe
    msgctl(msgidSigP1, IPC_RMID, NULL);
    msgctl(msgidSigP2, IPC_RMID, NULL);
    msgctl(msgidSigP3, IPC_RMID, NULL);
    msgctl(msgidSigParent, IPC_RMID, NULL);

    printf("[Parent] Wszystkie zasoby usunięte. Koniec.\n");
    return 0;
}
